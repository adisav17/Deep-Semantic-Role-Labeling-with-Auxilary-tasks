{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "A100"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "6b99670affcb4446a17dce82885fc7c2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_db231c407e8940059d11f5fbbc0b8ada",
              "IPY_MODEL_bff361aa6e504b4b8899355a046d6e08",
              "IPY_MODEL_9017f1d9be2f457f9a658e36d492e66d"
            ],
            "layout": "IPY_MODEL_816a09a8fdcc49a9b8637d28ebdfd437"
          }
        },
        "db231c407e8940059d11f5fbbc0b8ada": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9a480df77bc94ac18e293c0c5b0b4da7",
            "placeholder": "​",
            "style": "IPY_MODEL_042f6198455c4edc89b6a37bb37f0d5e",
            "value": "Downloading (…)solve/main/vocab.txt: 100%"
          }
        },
        "bff361aa6e504b4b8899355a046d6e08": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1f9b2ae814864b1ca353f1225ff3655c",
            "max": 231508,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_9849d1800d07434c9873002d1a0749c3",
            "value": 231508
          }
        },
        "9017f1d9be2f457f9a658e36d492e66d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_02d9624a942e4e7a96ae517637153ac0",
            "placeholder": "​",
            "style": "IPY_MODEL_8d849d2df98545c790602de53723d18e",
            "value": " 232k/232k [00:00&lt;00:00, 3.37MB/s]"
          }
        },
        "816a09a8fdcc49a9b8637d28ebdfd437": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9a480df77bc94ac18e293c0c5b0b4da7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "042f6198455c4edc89b6a37bb37f0d5e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1f9b2ae814864b1ca353f1225ff3655c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9849d1800d07434c9873002d1a0749c3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "02d9624a942e4e7a96ae517637153ac0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8d849d2df98545c790602de53723d18e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "833fcb93c55c4997b346c49173039c54": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_cb4dc33fa32e40c8bc6d1c9d56c14439",
              "IPY_MODEL_5078ebd6c66d401791496fc03683371e",
              "IPY_MODEL_992ca4df428b4528a2accf6e776f18c2"
            ],
            "layout": "IPY_MODEL_df9730fed12e4ea8a28f02dc9ecec383"
          }
        },
        "cb4dc33fa32e40c8bc6d1c9d56c14439": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_49c8291a3f344515a76feb05aa3cbbb1",
            "placeholder": "​",
            "style": "IPY_MODEL_46ac91b9bed7421692e30fdad8ca9747",
            "value": "Downloading (…)okenizer_config.json: 100%"
          }
        },
        "5078ebd6c66d401791496fc03683371e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_60045d391616494ca48099ee0f477e30",
            "max": 28,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f0dfcbbf158d49cb97717f2092a96563",
            "value": 28
          }
        },
        "992ca4df428b4528a2accf6e776f18c2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_16e32c04b5c347778d86e5005b480ecb",
            "placeholder": "​",
            "style": "IPY_MODEL_a1fcc08f8164405cbb3861c2de74764f",
            "value": " 28.0/28.0 [00:00&lt;00:00, 2.29kB/s]"
          }
        },
        "df9730fed12e4ea8a28f02dc9ecec383": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "49c8291a3f344515a76feb05aa3cbbb1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "46ac91b9bed7421692e30fdad8ca9747": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "60045d391616494ca48099ee0f477e30": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f0dfcbbf158d49cb97717f2092a96563": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "16e32c04b5c347778d86e5005b480ecb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a1fcc08f8164405cbb3861c2de74764f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c80dc175f2d04e5ea745420a12343ff7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9d344db079a046b8b32649fb22dcb3b5",
              "IPY_MODEL_b74da3924a3047e88ac53ba5609fae22",
              "IPY_MODEL_d1f0a4d3050d40ff96c2f1e979a869bd"
            ],
            "layout": "IPY_MODEL_462bf068a0b04591aed602a67414f44a"
          }
        },
        "9d344db079a046b8b32649fb22dcb3b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ab607ea53877475fb055b30ada01dfba",
            "placeholder": "​",
            "style": "IPY_MODEL_55c5803594fc45f1addbdda1d20f02c1",
            "value": "Downloading (…)lve/main/config.json: 100%"
          }
        },
        "b74da3924a3047e88ac53ba5609fae22": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3def510e826d403bacac30f1b244692c",
            "max": 570,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_dee1f89d7d2b4a93b690f8a10670dd25",
            "value": 570
          }
        },
        "d1f0a4d3050d40ff96c2f1e979a869bd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5b7f8eadea954ab68f81333396531060",
            "placeholder": "​",
            "style": "IPY_MODEL_a8269c7643ea4043af8d7c14511df170",
            "value": " 570/570 [00:00&lt;00:00, 52.8kB/s]"
          }
        },
        "462bf068a0b04591aed602a67414f44a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ab607ea53877475fb055b30ada01dfba": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "55c5803594fc45f1addbdda1d20f02c1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3def510e826d403bacac30f1b244692c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dee1f89d7d2b4a93b690f8a10670dd25": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5b7f8eadea954ab68f81333396531060": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a8269c7643ea4043af8d7c14511df170": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f11b7c33bddf45558f267b49a50cebd0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e389a980392246f99bddee9bacbac6c9",
              "IPY_MODEL_99b6fbcd04024a3badd8e1308a6d5aaf",
              "IPY_MODEL_115d8d9f1f9e47baa5a5c724cb548c98"
            ],
            "layout": "IPY_MODEL_30aa1a79364b4552be01548d125dbc6d"
          }
        },
        "e389a980392246f99bddee9bacbac6c9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f402bf61c1f34ba8aa7ca4b378099b62",
            "placeholder": "​",
            "style": "IPY_MODEL_a7aa2da092ed4493873d19e23a6408b7",
            "value": "Downloading pytorch_model.bin: 100%"
          }
        },
        "99b6fbcd04024a3badd8e1308a6d5aaf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6de1921e68154c6f99a9f81d4778b9f2",
            "max": 440473133,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7a39353813a34466a2032d89d12226f8",
            "value": 440473133
          }
        },
        "115d8d9f1f9e47baa5a5c724cb548c98": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e6f62788ed38481fa90d7f16824204d0",
            "placeholder": "​",
            "style": "IPY_MODEL_78afc39eaa4d473c8c8732ceb805472b",
            "value": " 440M/440M [00:27&lt;00:00, 16.1MB/s]"
          }
        },
        "30aa1a79364b4552be01548d125dbc6d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f402bf61c1f34ba8aa7ca4b378099b62": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a7aa2da092ed4493873d19e23a6408b7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6de1921e68154c6f99a9f81d4778b9f2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7a39353813a34466a2032d89d12226f8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e6f62788ed38481fa90d7f16824204d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "78afc39eaa4d473c8c8732ceb805472b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BceIGlVTHZPx",
        "outputId": "57dfb8e2-47df-46b6-b254-9daa29404708"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting transformers\n",
            "  Downloading transformers-4.28.1-py3-none-any.whl (7.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.0/7.0 MB\u001b[0m \u001b[31m58.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.12.0)\n",
            "Collecting huggingface-hub<1.0,>=0.11.0 (from transformers)\n",
            "  Downloading huggingface_hub-0.14.1-py3-none-any.whl (224 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m224.5/224.5 kB\u001b[0m \u001b[31m15.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.22.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (23.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2022.10.31)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.27.1)\n",
            "Collecting tokenizers!=0.11.3,<0.14,>=0.11.1 (from transformers)\n",
            "  Downloading tokenizers-0.13.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.8 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.8/7.8 MB\u001b[0m \u001b[31m42.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.65.0)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.11.0->transformers) (2023.4.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.11.0->transformers) (4.5.0)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (1.26.15)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.4)\n",
            "Installing collected packages: tokenizers, huggingface-hub, transformers\n",
            "Successfully installed huggingface-hub-0.14.1 tokenizers-0.13.3 transformers-4.28.1\n"
          ]
        }
      ],
      "source": [
        "! pip install transformers"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NTmaNYoqHotD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from transformers import BertTokenizer, BertModel\n",
        "from sklearn.metrics import precision_recall_curve, f1_score, accuracy_score\n",
        "import numpy as np\n",
        "import math\n",
        "import random\n",
        "import itertools\n",
        "import pandas as pd \n",
        "import csv\n"
      ],
      "metadata": {
        "id": "gKr1GFzuHsCa"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def map_pos_tags(tag):\n",
        "    pos_groups = {\n",
        "        \"NN\": [\"NNS\", \"NNP\", \"NNPS\"],\n",
        "        \"VB\": [\"VBD\", \"VBG\", \"VBN\", \"VBP\", \"VBZ\"],\n",
        "        \"CC\": [\"CC\"],\n",
        "        \"DT\": [\"DT\"],\n",
        "        \"JJ\": [\"JJ\", \"JJR\", \"JJS\"],\n",
        "        \"IN\": [\"IN\"],\n",
        "        \"PRP\": [\"PRP\", \"PRP$\"],\n",
        "        \"DT\": [\"DT\"],\n",
        "    }\n",
        "    \n",
        "    for key, value in pos_groups.items():\n",
        "        if tag in value:\n",
        "            return key\n",
        "    return \"other\""
      ],
      "metadata": {
        "id": "q23gTG12Ht2f"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def load_and_preprocess_data(file_path):\n",
        "    sentences = []\n",
        "    predicate_indices = []\n",
        "    labels = []\n",
        "    pos_tags = []\n",
        "    bio_tags = []\n",
        "    directed_distances = []\n",
        "    skipped_count = 0\n",
        "    taken_count = 0 \n",
        "\n",
        "    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n",
        "        reader = csv.reader(f, delimiter=\"\\t\", quoting=csv.QUOTE_NONE)\n",
        "        current_sentence = []\n",
        "        current_predicate_index = None\n",
        "        current_labels = []\n",
        "        current_pos_tags = []\n",
        "        current_bio_tags = []\n",
        "        current_directed_distances = []\n",
        "        has_arg1 = False\n",
        "\n",
        "        for row in reader:\n",
        "            if row:\n",
        "                #print(row)\n",
        "                word, pos, bio, word_idx, sentence_idx = row[:5]\n",
        "                pos = map_pos_tags(pos)\n",
        "\n",
        "                if len(row)>5:\n",
        "                    if row[5] == \"PRED\":\n",
        "                           current_predicate_index = int(word_idx)\n",
        "\n",
        "                current_sentence.append(word)\n",
        "                current_pos_tags.append(pos)\n",
        "                current_bio_tags.append(bio)\n",
        "                label = 1 if \"ARG1\" in row else 0\n",
        "                current_labels.append(label)\n",
        "        \n",
        "                if current_predicate_index is not None:\n",
        "                   #print(\"here in pred idx not none\")\n",
        "                   current_directed_distances.append(int(word_idx) - current_predicate_index)\n",
        "\n",
        "                if \"ARG1\" in row:\n",
        "                    has_arg1 = True\n",
        "                    #print(\"here in has arg1\", has_arg1)\n",
        "            else:\n",
        "                if current_sentence and has_arg1 and current_predicate_index is not None:\n",
        "                   # print(\"here in else of if row\") \n",
        "                    sentences.append(\" \".join(current_sentence))\n",
        "                    predicate_indices.append(current_predicate_index)\n",
        "                    labels.append(current_labels)\n",
        "                    pos_tags.append(current_pos_tags)\n",
        "                    bio_tags.append(current_bio_tags)\n",
        "                    for i in range(current_predicate_index ,0, -1):\n",
        "                      current_directed_distances.insert(0,i - current_predicate_index - 1)\n",
        "\n",
        "                    directed_distances.append(current_directed_distances)\n",
        "                  \n",
        "                    taken_count+=1\n",
        "                else:\n",
        "                    #print(\"Skipped sentence:\", current_sentence)\n",
        "                    skipped_count+=1\n",
        "                    #break\n",
        "\n",
        "                current_sentence = []\n",
        "                current_predicate_index = None\n",
        "                current_labels = []\n",
        "                current_pos_tags = []\n",
        "                current_bio_tags = []\n",
        "                current_directed_distances = []\n",
        "                has_arg1 = False\n",
        "\n",
        "    return sentences, predicate_indices, labels, pos_tags, bio_tags, directed_distances, skipped_count, taken_count\n"
      ],
      "metadata": {
        "id": "3eNkeqTYHzNZ"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qSOGI3IQH1n1",
        "outputId": "ef46e716-7974-4b53-8b96-73293b9d02cd"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%cd /content/drive/My Drive/nlp_srl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jHnoS8EiH9rq",
        "outputId": "bd5e20d7-cdc7-4977-d92d-a73436e7760b"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/My Drive/nlp_srl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def load_and_preprocess_data_multiple_files(file_paths):\n",
        "    sentences = []\n",
        "    predicate_indices = []\n",
        "    labels = []\n",
        "    pos_tags = []\n",
        "    bio_tags = []\n",
        "    directed_distances = []\n",
        "    skipped_counts = []\n",
        "    taken_counts = []\n",
        "\n",
        "    for file_path in file_paths:\n",
        "        result = load_and_preprocess_data(file_path)\n",
        "        sentences.extend(result[0])\n",
        "        predicate_indices.extend(result[1])\n",
        "        labels.extend(result[2])\n",
        "        pos_tags.extend(result[3])\n",
        "        bio_tags.extend(result[4])\n",
        "        directed_distances.extend(result[5])\n",
        "        skipped_counts.append(result[6])\n",
        "        taken_counts.append(result[7])\n",
        "\n",
        "    return sentences, predicate_indices, labels, pos_tags, bio_tags, directed_distances, skipped_counts, taken_counts\n"
      ],
      "metadata": {
        "id": "1_8XCREgIAfI"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def tokenize_loaded_data(sentences, predicate_indices, labels, pos_tags, bio_tags, directed_distances):\n",
        "    # Create unique dictionaries for pos_tags and bio_tags\n",
        "    pos_tag_dict = {tag: idx for idx, tag in enumerate(set(tag for tags in pos_tags for tag in tags))}\n",
        "    bio_tag_dict = {tag: idx for idx, tag in enumerate(set(tag for tags in bio_tags for tag in tags))}\n",
        "\n",
        "    # Convert pos_tags and bio_tags to integers using the dictionaries\n",
        "    pos_tags = [[pos_tag_dict[tag] for tag in tags] for tags in pos_tags]\n",
        "    bio_tags = [[bio_tag_dict[tag] for tag in tags] for tags in bio_tags]\n",
        "\n",
        "    return sentences, predicate_indices, labels, pos_tags, bio_tags, directed_distances"
      ],
      "metadata": {
        "id": "fHGS5ac_IFwM"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "file_paths = ['%_nombank.clean.train', '%_nombank.clean.test', '%_nombank.clean.dev']"
      ],
      "metadata": {
        "id": "b1Fv3MYUINhw"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def pad_sequences(sequences, maxlen, padding='pre', truncating='pre', value=-100):\n",
        "    padded_sequences = []\n",
        "    for sequence in sequences:\n",
        "        if len(sequence) > maxlen:\n",
        "            if truncating == 'pre':\n",
        "                sequence = sequence[-maxlen:]\n",
        "            elif truncating == 'post':\n",
        "                sequence = sequence[:maxlen]\n",
        "        elif len(sequence) < maxlen:\n",
        "            if padding == 'pre':\n",
        "                sequence = [value] * (maxlen - len(sequence)) + sequence\n",
        "            elif padding == 'post':\n",
        "                sequence = sequence + [value] * (maxlen - len(sequence))\n",
        "        padded_sequences.append(sequence)\n",
        "    return padded_sequences\n"
      ],
      "metadata": {
        "id": "K_LXXrBbIWSg"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113,
          "referenced_widgets": [
            "6b99670affcb4446a17dce82885fc7c2",
            "db231c407e8940059d11f5fbbc0b8ada",
            "bff361aa6e504b4b8899355a046d6e08",
            "9017f1d9be2f457f9a658e36d492e66d",
            "816a09a8fdcc49a9b8637d28ebdfd437",
            "9a480df77bc94ac18e293c0c5b0b4da7",
            "042f6198455c4edc89b6a37bb37f0d5e",
            "1f9b2ae814864b1ca353f1225ff3655c",
            "9849d1800d07434c9873002d1a0749c3",
            "02d9624a942e4e7a96ae517637153ac0",
            "8d849d2df98545c790602de53723d18e",
            "833fcb93c55c4997b346c49173039c54",
            "cb4dc33fa32e40c8bc6d1c9d56c14439",
            "5078ebd6c66d401791496fc03683371e",
            "992ca4df428b4528a2accf6e776f18c2",
            "df9730fed12e4ea8a28f02dc9ecec383",
            "49c8291a3f344515a76feb05aa3cbbb1",
            "46ac91b9bed7421692e30fdad8ca9747",
            "60045d391616494ca48099ee0f477e30",
            "f0dfcbbf158d49cb97717f2092a96563",
            "16e32c04b5c347778d86e5005b480ecb",
            "a1fcc08f8164405cbb3861c2de74764f",
            "c80dc175f2d04e5ea745420a12343ff7",
            "9d344db079a046b8b32649fb22dcb3b5",
            "b74da3924a3047e88ac53ba5609fae22",
            "d1f0a4d3050d40ff96c2f1e979a869bd",
            "462bf068a0b04591aed602a67414f44a",
            "ab607ea53877475fb055b30ada01dfba",
            "55c5803594fc45f1addbdda1d20f02c1",
            "3def510e826d403bacac30f1b244692c",
            "dee1f89d7d2b4a93b690f8a10670dd25",
            "5b7f8eadea954ab68f81333396531060",
            "a8269c7643ea4043af8d7c14511df170"
          ]
        },
        "id": "Tbpa7lK3IZg0",
        "outputId": "18e9477f-3bfe-4ee9-9b27-0795a5fc4b30"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Downloading (…)solve/main/vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6b99670affcb4446a17dce82885fc7c2"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Downloading (…)okenizer_config.json:   0%|          | 0.00/28.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "833fcb93c55c4997b346c49173039c54"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Downloading (…)lve/main/config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c80dc175f2d04e5ea745420a12343ff7"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def pad_and_align_tags(sentence, labels, pos_tags, bio_tags, directed_distances, max_length, tokenizer):\n",
        "    tokenized_sentence = tokenizer.tokenize(sentence)\n",
        "    words = sentence.split()\n",
        "\n",
        "    def align_tags(tags):\n",
        "        aligned_tags = [-100] * len(tokenized_sentence)\n",
        "        for word, tag, idx in zip(words, tags, range(len(words))):\n",
        "            subwords = tokenizer.tokenize(word)\n",
        "            subword_idx = tokenized_sentence.index(subwords[0], idx)\n",
        "            aligned_tags[subword_idx] = tag\n",
        "        return aligned_tags\n",
        "\n",
        "    aligned_labels = align_tags(labels)\n",
        "    aligned_pos_tags = align_tags(pos_tags)\n",
        "    aligned_bio_tags = align_tags(bio_tags)\n",
        "    aligned_directed_distances = align_tags(directed_distances)\n",
        "\n",
        "    def pad_tags(tags):\n",
        "        padded_tags = [-100] + tags[:max_length - 2] + [-100]\n",
        "        padded_tags = padded_tags + [-100] * (max_length - len(padded_tags))\n",
        "        return padded_tags\n",
        "\n",
        "    padded_labels = pad_tags(aligned_labels)\n",
        "    padded_pos_tags = pad_tags(aligned_pos_tags)\n",
        "    padded_bio_tags = pad_tags(aligned_bio_tags)\n",
        "    padded_directed_distances = pad_tags(aligned_directed_distances)\n",
        "\n",
        "    return padded_labels, padded_pos_tags, padded_bio_tags, padded_directed_distances\n"
      ],
      "metadata": {
        "id": "RpqtArMXIbx5"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class SRLauxDataset(torch.utils.data.Dataset):\n",
        "    def __init__(self, file_paths, tokenizer, max_length):\n",
        "        self.sentences, self.predicate_indices, self.labels, self.pos_tags, self.bio_tags, self.directed_distances, _, _ = load_and_preprocess_data_multiple_files(file_paths)\n",
        "        self.sentences, self.predicate_indices, self.labels, self.pos_tags, self.bio_tags, self.directed_distances = tokenize_loaded_data(self.sentences, self.predicate_indices, self.labels, self.pos_tags, self.bio_tags, self.directed_distances)\n",
        "        self.tokenizer = tokenizer\n",
        "        self.max_length = max_length\n",
        "\n",
        "        self.padded_input_ids = []\n",
        "        self.padded_labels = []\n",
        "        self.padded_pos_tags = []\n",
        "        self.padded_bio_tags = []\n",
        "        self.padded_directed_distances = []\n",
        "\n",
        "        for sentence, labels, pos_tags, bio_tags, directed_distances in zip(self.sentences, self.labels, self.pos_tags, self.bio_tags, self.directed_distances):\n",
        "            input_ids, padded_labels, padded_pos_tags, padded_bio_tags, padded_directed_distances = self.process_sentence(sentence, labels, pos_tags, bio_tags, directed_distances)\n",
        "            self.padded_input_ids.append(input_ids)\n",
        "            self.padded_labels.append(padded_labels)\n",
        "            self.padded_pos_tags.append(padded_pos_tags)\n",
        "            self.padded_bio_tags.append(padded_bio_tags)\n",
        "            self.padded_directed_distances.append(padded_directed_distances)\n",
        "\n",
        "    def process_sentence(self, sentence, labels, pos_tags, bio_tags, directed_distances):\n",
        "        tokenized_sentence = self.tokenizer.tokenize(sentence)\n",
        "        encoded_sentence = self.tokenizer.encode(sentence, add_special_tokens=True, max_length=self.max_length, padding='max_length', truncation=True)\n",
        "        input_ids = torch.tensor(encoded_sentence, dtype=torch.long)\n",
        "\n",
        "        padded_labels, padded_pos_tags, padded_bio_tags, padded_directed_distances = pad_and_align_tags(sentence, labels, pos_tags, bio_tags, directed_distances, self.max_length, self.tokenizer)\n",
        "\n",
        "        padded_labels = torch.tensor(padded_labels, dtype=torch.long)\n",
        "        padded_pos_tags = torch.tensor(padded_pos_tags, dtype=torch.long)\n",
        "        padded_bio_tags = torch.tensor(padded_bio_tags, dtype=torch.long)\n",
        "        padded_directed_distances = torch.tensor(padded_directed_distances, dtype=torch.long)\n",
        "\n",
        "        return input_ids, padded_labels, padded_pos_tags, padded_bio_tags, padded_directed_distances\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        input_ids = self.padded_input_ids[index]\n",
        "        predicate_idx = self.predicate_indices[index]\n",
        "        padded_labels = self.padded_labels[index]\n",
        "        padded_pos_tags = self.padded_pos_tags[index]\n",
        "        padded_bio_tags = self.padded_bio_tags[index]\n",
        "        padded_directed_distances = self.padded_directed_distances[index]\n",
        "\n",
        "        return input_ids, predicate_idx, padded_labels, padded_pos_tags, padded_bio_tags, padded_directed_distances\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.sentences)\n"
      ],
      "metadata": {
        "id": "ozKw4ywBIgZa"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## dataset defined here\n",
        "max_length = 128\n",
        "srl_aux_dataset = SRLauxDataset(file_paths, tokenizer, max_length)"
      ],
      "metadata": {
        "id": "89g_j767IjWj"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def find_num_tags(tags):\n",
        "  \n",
        "  tags_flat = [tag for tag_list in tags for tag in tag_list]\n",
        "  #print(tags_flat[2])\n",
        "  #print(len(tags_flat))\n",
        "  return len(set(tags_flat)) + 1\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "1uNAtA9RIqgP"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sentences, predicate_indices, labels, pos_tags, bio_tags, directed_distances, _, _ = load_and_preprocess_data_multiple_files(file_paths)\n",
        "sentences, predicate_indices, labels, pos_tags, bio_tags, directed_distances = tokenize_loaded_data(sentences, predicate_indices, labels, pos_tags, bio_tags, directed_distances)"
      ],
      "metadata": {
        "id": "Funh3ehUIz6D"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_pos_tags = find_num_tags(pos_tags)"
      ],
      "metadata": {
        "id": "8YkU9_W6I-Bs"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_pos_tags"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i4A7qWGeJLVX",
        "outputId": "94f25d6d-9fe1-476c-bac9-8380dd219444"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_bio_tags = find_num_tags(bio_tags)"
      ],
      "metadata": {
        "id": "y3L8a7wEJNaJ"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_bio_tags"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y2F9-kLmJRwg",
        "outputId": "9b7876d7-22d2-40ed-9dcc-bed2c31ecf46"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torch.utils.data import random_split\n",
        "\n",
        "# Calculate the number of samples for the train and validation sets\n",
        "total_samples = len(srl_aux_dataset)\n",
        "train_samples = int(total_samples * 0.8)\n",
        "val_samples = total_samples - train_samples\n",
        "\n",
        "# Split the dataset into train and validation sets\n",
        "train_dataset, val_dataset = random_split(srl_aux_dataset, [train_samples, val_samples])\n"
      ],
      "metadata": {
        "id": "a-TMuZzMJUgX"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 4  # Choose a batch size according to your needs\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4)\n",
        "val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=4)"
      ],
      "metadata": {
        "id": "Bi1km1z2JrhV"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(device)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-YOdxpI2JwXN",
        "outputId": "37b8bf23-b98d-4fcc-94b1-4fe779ad59f5"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cuda\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class SRLauxModel(nn.Module):\n",
        "    def __init__(self, bert_model, lstm_hidden_size, dropout_rate, layers_to_use=[1, 2, 3], num_pos_tags=9, num_bio_tags=18):\n",
        "        super(SRLauxModel, self).__init__()\n",
        "        self.bert = bert_model\n",
        "        self.layers_to_use = layers_to_use\n",
        "        self.layer_weights = nn.Parameter(torch.rand(len(layers_to_use), dtype=torch.float))\n",
        "        self.softmax = nn.Softmax(dim=0)\n",
        "\n",
        "        self.auxiliary_pos = nn.Linear(in_features=self.bert.config.hidden_size, out_features=num_pos_tags)\n",
        "        self.auxiliary_bio = nn.Linear(in_features=self.bert.config.hidden_size, out_features=num_bio_tags)\n",
        "        self.auxiliary_directed_distance = nn.Linear(in_features=self.bert.config.hidden_size, out_features=1)\n",
        "\n",
        "        self.downstream = nn.Sequential(\n",
        "            nn.LSTM(input_size=self.bert.config.hidden_size,\n",
        "                    hidden_size=lstm_hidden_size,\n",
        "                    num_layers=1,\n",
        "                    batch_first=True,\n",
        "                    bidirectional=True),\n",
        "            nn.Dropout(dropout_rate),\n",
        "            nn.Linear(in_features=lstm_hidden_size * 2, out_features=1)\n",
        "        )\n",
        "\n",
        "    def forward(self, input_ids, predicate_idx, labels=None):\n",
        "        input_embeddings = self.bert.embeddings(input_ids)\n",
        "        \n",
        "        # Create predicate indicator embedding\n",
        "        predicate_mask = torch.zeros_like(input_ids).scatter_(1, predicate_idx.view(-1, 1), 1)\n",
        "        predicate_indicator = self.bert.embeddings.token_type_embeddings(predicate_mask.to(input_ids.device))\n",
        "\n",
        "        # Add predicate indicator to input embeddings\n",
        "        input_embeddings = input_embeddings + predicate_indicator\n",
        "\n",
        "        bert_output = self.bert(inputs_embeds=input_embeddings, output_hidden_states=True)\n",
        "        all_layer_outputs = bert_output.hidden_states\n",
        "\n",
        "        selected_layer_outputs = [all_layer_outputs[i] for i in self.layers_to_use]\n",
        "        weighted_outputs = [self.softmax(self.layer_weights)[i] * output for i, output in enumerate(selected_layer_outputs)]\n",
        "        weighted_average = torch.stack(weighted_outputs).sum(dim=0)\n",
        "\n",
        "        pos_logits = self.auxiliary_pos(weighted_average)\n",
        "        bio_logits = self.auxiliary_bio(weighted_average)\n",
        "        directed_distance_logits = self.auxiliary_directed_distance(weighted_average)\n",
        "\n",
        "        downstream_output, _ = self.downstream[0](weighted_average)\n",
        "        downstream_output = self.downstream[1](downstream_output)\n",
        "        logits = self.downstream[2](downstream_output)\n",
        "\n",
        "        if labels is not None:\n",
        "            labels_mask = (labels != -100)\n",
        "            labels = labels[labels_mask]\n",
        "            logits = logits[labels_mask]\n",
        "\n",
        "       # logits = logits.squeeze(-1)     \n",
        "\n",
        "        return logits, labels, pos_logits, bio_logits, directed_distance_logits\n"
      ],
      "metadata": {
        "id": "CR_m0vEbJ0SV"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bert_model = BertModel.from_pretrained(\"bert-base-uncased\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 123,
          "referenced_widgets": [
            "f11b7c33bddf45558f267b49a50cebd0",
            "e389a980392246f99bddee9bacbac6c9",
            "99b6fbcd04024a3badd8e1308a6d5aaf",
            "115d8d9f1f9e47baa5a5c724cb548c98",
            "30aa1a79364b4552be01548d125dbc6d",
            "f402bf61c1f34ba8aa7ca4b378099b62",
            "a7aa2da092ed4493873d19e23a6408b7",
            "6de1921e68154c6f99a9f81d4778b9f2",
            "7a39353813a34466a2032d89d12226f8",
            "e6f62788ed38481fa90d7f16824204d0",
            "78afc39eaa4d473c8c8732ceb805472b"
          ]
        },
        "id": "iBJ7SNJuJ5Tl",
        "outputId": "0585667e-345a-4df6-a408-a10ded686aa5"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Downloading pytorch_model.bin:   0%|          | 0.00/440M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f11b7c33bddf45558f267b49a50cebd0"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.predictions.transform.dense.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.decoder.weight', 'cls.seq_relationship.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.bias', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.bias']\n",
            "- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def validate_on_train(model, dataloader):\n",
        "    main_task_criterion = nn.BCEWithLogitsLoss()\n",
        "    pos_tag_criterion = nn.CrossEntropyLoss()\n",
        "    bio_tag_criterion = nn.CrossEntropyLoss()\n",
        "    directed_distance_criterion = nn.MSELoss()\n",
        "\n",
        "    model.eval()\n",
        "    total_loss = 0\n",
        "    total_aux_pos_loss = 0\n",
        "    total_aux_bio_loss = 0\n",
        "    total_aux_directed_distance_loss = 0\n",
        "    \n",
        "    all_labels = []\n",
        "    all_logits = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for batch in dataloader:\n",
        "            input_ids, predicate_idx, padded_labels, padded_pos_tags, padded_bio_tags, padded_directed_distances = batch\n",
        "            input_ids, predicate_idx, padded_labels = input_ids.to(device), predicate_idx.to(device), padded_labels.to(device)\n",
        "            padded_pos_tags, padded_bio_tags, padded_directed_distances = padded_pos_tags.to(device), padded_bio_tags.to(device), padded_directed_distances.to(device)\n",
        "\n",
        "            logits, labels, pos_logits, bio_logits, directed_distance_logits = model(input_ids, predicate_idx, padded_labels)\n",
        "\n",
        "            loss = main_task_criterion(logits, labels.float().unsqueeze(1))\n",
        "            aux_pos_loss = pos_tag_criterion(pos_logits.view(-1, pos_logits.shape[-1]), padded_pos_tags.view(-1))\n",
        "            aux_bio_loss = bio_tag_criterion(bio_logits.view(-1, bio_logits.shape[-1]), padded_bio_tags.view(-1))\n",
        "            aux_directed_distance_loss = directed_distance_criterion(directed_distance_logits.squeeze(-1), padded_directed_distances.float())\n",
        "\n",
        "            total_loss += loss.item()\n",
        "            total_aux_pos_loss += aux_pos_loss.item()\n",
        "            total_aux_bio_loss += aux_bio_loss.item()\n",
        "            total_aux_directed_distance_loss += aux_directed_distance_loss.item()\n",
        "\n",
        "            mask = labels.ne(-100)\n",
        "            valid_labels = labels[mask].cpu().numpy()\n",
        "            valid_logits = logits[mask].cpu().numpy().squeeze()\n",
        "\n",
        "            all_labels.extend(valid_labels)\n",
        "            all_logits.extend(valid_logits)\n",
        "\n",
        "        # Masking the -100 labels for auxiliary tasks\n",
        "        aux_mask = padded_labels.ne(-100).view(-1)\n",
        "\n",
        "        average_loss = total_loss / len(dataloader)\n",
        "        average_aux_pos_loss = (total_aux_pos_loss / len(dataloader)) * aux_mask.float().mean()\n",
        "        average_aux_bio_loss = (total_aux_bio_loss / len(dataloader)) * aux_mask.float().mean()\n",
        "        average_aux_directed_distance_loss = (total_aux_directed_distance_loss / len(dataloader)) * aux_mask.float().mean()\n",
        "    \n",
        "    all_labels = np.array(all_labels)\n",
        "    all_logits = np.array(all_logits)\n",
        "\n",
        "    all_probs = 1 / (1 + np.exp(-all_logits))\n",
        "\n",
        "    precision, recall, thresholds = precision_recall_curve(all_labels, all_probs)\n",
        "\n",
        "    f_scores = np.where((precision + recall) != 0.0, (2 * precision * recall) / (precision + recall + 1e-10), 0)\n",
        "\n",
        "    best_threshold = thresholds[np.argmax(f_scores)]\n",
        "\n",
        "    preds = (all_probs > best_threshold).astype(int)\n",
        "    accuracy = accuracy_score(all_labels, preds)\n",
        "    best_f_score = f1_score(all_labels, preds)\n",
        "\n",
        "    return average_loss, accuracy, best_f_score, best_threshold, average_aux_pos_loss, average_aux_bio_loss, average_aux_directed_distance_loss\n"
      ],
      "metadata": {
        "id": "6jt1rRnqJ-2Z"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def validate(model, dataloader):\n",
        "    main_task_criterion = nn.BCEWithLogitsLoss()\n",
        "    pos_tag_criterion = nn.CrossEntropyLoss()\n",
        "    bio_tag_criterion = nn.CrossEntropyLoss()\n",
        "    directed_distance_criterion = nn.MSELoss()\n",
        "\n",
        "    model.eval()\n",
        "    total_loss = 0\n",
        "    total_aux_pos_loss = 0\n",
        "    total_aux_bio_loss = 0\n",
        "    total_aux_directed_distance_loss = 0\n",
        "    \n",
        "    all_labels = []\n",
        "    all_logits = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for batch in dataloader:\n",
        "            input_ids, predicate_idx, padded_labels, padded_pos_tags, padded_bio_tags, padded_directed_distances = batch\n",
        "            input_ids, predicate_idx, padded_labels = input_ids.to(device), predicate_idx.to(device), padded_labels.to(device)\n",
        "            padded_pos_tags, padded_bio_tags, padded_directed_distances = padded_pos_tags.to(device), padded_bio_tags.to(device), padded_directed_distances.to(device)\n",
        "\n",
        "            logits, labels, pos_logits, bio_logits, directed_distance_logits = model(input_ids, predicate_idx, padded_labels)\n",
        "\n",
        "            loss = main_task_criterion(logits, labels.float().unsqueeze(1))\n",
        "            aux_pos_loss = pos_tag_criterion(pos_logits.view(-1, pos_logits.shape[-1]), padded_pos_tags.view(-1))\n",
        "            aux_bio_loss = bio_tag_criterion(bio_logits.view(-1, bio_logits.shape[-1]), padded_bio_tags.view(-1))\n",
        "            aux_directed_distance_loss = directed_distance_criterion(directed_distance_logits.squeeze(-1), padded_directed_distances.float())\n",
        "\n",
        "            total_loss += loss.item()\n",
        "            total_aux_pos_loss += aux_pos_loss.item()\n",
        "            total_aux_bio_loss += aux_bio_loss.item()\n",
        "            total_aux_directed_distance_loss += aux_directed_distance_loss.item()\n",
        "\n",
        "            mask = labels.ne(-100)\n",
        "            valid_labels = labels[mask].cpu().numpy()\n",
        "            valid_logits = logits[mask].cpu().numpy().squeeze()\n",
        "\n",
        "            all_labels.extend(valid_labels)\n",
        "            all_logits.extend(valid_logits)\n",
        "\n",
        "        # Masking the -100 labels for auxiliary tasks\n",
        "        aux_mask = padded_labels.ne(-100).view(-1)\n",
        "\n",
        "        average_loss = total_loss / len(dataloader)\n",
        "        average_aux_pos_loss = (total_aux_pos_loss / len(dataloader)) * aux_mask.float().mean()\n",
        "        average_aux_bio_loss = (total_aux_bio_loss / len(dataloader)) * aux_mask.float().mean()\n",
        "        average_aux_directed_distance_loss = (total_aux_directed_distance_loss / len(dataloader)) * aux_mask.float().mean()\n",
        "    \n",
        "    all_labels = np.array(all_labels)\n",
        "    all_logits = np.array(all_logits)\n",
        "\n",
        "    all_probs = 1 / (1 + np.exp(-all_logits))\n",
        "\n",
        "    precision, recall, thresholds = precision_recall_curve(all_labels, all_probs)\n",
        "\n",
        "    f_scores = np.where((precision + recall) != 0.0, (2 * precision * recall) / (precision + recall + 1e-10), 0)\n",
        "\n",
        "    best_threshold = thresholds[np.argmax(f_scores)]\n",
        "\n",
        "    preds = (all_probs > best_threshold).astype(int)\n",
        "    accuracy = accuracy_score(all_labels, preds)\n",
        "    best_f_score = f1_score(all_labels, preds)\n",
        "\n",
        "    return average_loss, accuracy, best_f_score, best_threshold, average_aux_pos_loss, average_aux_bio_loss, average_aux_directed_distance_loss\n"
      ],
      "metadata": {
        "id": "5BEXpNugKFO_"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### new\n",
        "def train_model_aux(model, train_dataset, train_dataloader, val_dataloader, optimizer, num_epochs, task_weights, clip_grad_value=1, weighting_method='none', custom_value=20, patience=15):\n",
        "\n",
        "    main_task_criterion = nn.BCEWithLogitsLoss()\n",
        "    pos_tag_criterion = nn.CrossEntropyLoss()\n",
        "    bio_tag_criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "    # For regression\n",
        "    directed_distance_criterion = nn.MSELoss()\n",
        "    \n",
        "    if weighting_method != 'none':\n",
        "        negative_count = 24 #sum([1 for label_seq in train_dataset.labels for label in label_seq if label == 0])\n",
        "        positive_count = 1 #sum([1 for label_seq in train_dataset.labels for label in label_seq if label == 1])\n",
        "\n",
        "        if weighting_method == 'direct':\n",
        "            pos_weight = torch.tensor([negative_count / positive_count], device=device)\n",
        "        elif weighting_method == 'log':\n",
        "            pos_weight = torch.tensor([np.log(negative_count / positive_count)], device=device)\n",
        "        elif weighting_method == 'custom':\n",
        "            pos_weight = torch.tensor([custom_value], device=device)\n",
        "        else:\n",
        "            raise ValueError(\"Invalid weighting_method value. It must be 'none', 'direct', 'log', or 'custom'.\")\n",
        "    else:\n",
        "        pos_weight = torch.tensor(1.0, device=device)\n",
        "\n",
        "    train_accuracies = []\n",
        "    val_accuracies = []\n",
        "    train_f_scores = []\n",
        "    val_f_scores = []\n",
        "    avg_train_loss_per_epoch = []\n",
        "    avg_val_loss_per_epoch = []\n",
        "\n",
        "    # Early stopping initialization\n",
        "    best_val_accuracy = float('-inf')\n",
        "    patience_counter = 0\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        print(f\"Epoch {epoch+1}/{num_epochs}\")\n",
        "        total_train_loss = 0\n",
        "        num_train_batches = 0\n",
        "\n",
        "        for i, batch in enumerate(train_dataloader):\n",
        "            model.train()\n",
        "            input_ids, predicate_idx, padded_labels, padded_pos_tags, padded_bio_tags, padded_directed_distances = batch\n",
        "            input_ids, predicate_idx, padded_labels = input_ids.to(device), predicate_idx.to(device), padded_labels.to(device)\n",
        "            padded_pos_tags, padded_bio_tags, padded_directed_distances = padded_pos_tags.to(device), padded_bio_tags.to(device), padded_directed_distances.to(device)\n",
        "\n",
        "            logits, labels, pos_logits, bio_logits, directed_distance_logits = model(input_ids, predicate_idx, padded_labels)\n",
        "\n",
        "            main_task_criterion.pos_weight = pos_weight\n",
        "            main_task_loss = main_task_criterion(logits, labels.float().unsqueeze(1))\n",
        "\n",
        "            pos_tag_loss = pos_tag_criterion(pos_logits.view(-1, pos_logits.shape[-1]), padded_pos_tags.view(-1))\n",
        "            bio_tag_loss = bio_tag_criterion(bio_logits.view(-1, bio_logits.shape[-1]), padded_bio_tags.view(-1))\n",
        "            padded_directed_distances.unsqueeze(-1)\n",
        "        #    print(\"directed_distance_logits\",directed_distance_logits.shape)\n",
        "       #     print(\"padded_directed_distances\",padded_directed_distances.shape)\n",
        "            directed_distance_loss = directed_distance_criterion(directed_distance_logits.float().view(-1, directed_distance_logits.shape[-1]), padded_directed_distances.float().view(-1,directed_distance_logits.shape[-1]))\n",
        "         #   print(\"after\")\n",
        "          #  print(directed_distance_logits.float().view(-1, directed_distance_logits.shape[-1]).shape)\n",
        "          #  print(padded_directed_distances.float().view(-1).shape)\n",
        "\n",
        "    \n",
        "\n",
        "           # total_loss = main_task_loss + pos_tag_loss + bio_tag_loss + directed_distance_loss\n",
        "            task_weights = task_weights.float()\n",
        "            total_loss = task_weights[0]*main_task_loss + task_weights[1]*pos_tag_loss + task_weights[2]*bio_tag_loss + task_weights[3]*directed_distance_loss\n",
        "\n",
        "\n",
        "            total_loss.backward()\n",
        "\n",
        "            torch.nn.utils.clip_grad_norm_(model.parameters(), clip_grad_value)\n",
        "\n",
        "            optimizer.step()\n",
        "            optimizer.zero_grad()\n",
        "\n",
        "            total_train_loss += total_loss.item()\n",
        "            num_train_batches += 1\n",
        "\n",
        "        avg_train_loss_per_epoch.append(total_train_loss / num_train_batches)\n",
        "\n",
        "        val_loss, val_accuracy, val_f_score, val_threshold, average_aux_pos_loss, average_aux_bio_loss, average_aux_directed_distance_loss = validate(model, val_dataloader)\n",
        "        avg_val_loss_per_epoch.append(val_loss)\n",
        "\n",
        "        print(f\"Validation Loss: {val_loss}, Validation Accuracy: {val_accuracy}, Best F-score: {val_f_score}, Best Threshold: {val_threshold}, POS loss: {average_aux_pos_loss}, BIO loss; {average_aux_bio_loss}, Dir dist loss : {average_aux_directed_distance_loss}\")\n",
        "\n",
        "        if (epoch + 1) % 10 == 0:\n",
        "            average_loss, train_accuracy, train_f_score, train_threshold, average_aux_pos_loss, average_aux_bio_loss, average_aux_directed_distance_loss= validate_on_train(model, train_dataloader)\n",
        "            train_accuracies.append(train_accuracy)\n",
        "            val_accuracies.append(val_accuracy)\n",
        "            train_f_scores.append(train_f_score)\n",
        "            val_f_scores.append(val_f_score)\n",
        "\n",
        "           # torch.save(model.state_dict(), f\"{model_path}/{file_name+str(epoch)+'.pth'}\")\n",
        "           # print(\"model saved\")\n",
        "\n",
        "            print(f\"Train Loss: {val_loss}, Train Accuracy: {val_accuracy}, Best F-score: {train_f_score}, Best Threshold: {train_threshold}, POS loss: {average_aux_pos_loss}, BIO loss; {average_aux_bio_loss}, Dir dist loss : {average_aux_directed_distance_loss}\")\n",
        "\n",
        "         # Early stopping\n",
        "        if val_accuracy > best_val_accuracy:\n",
        "             best_val_accuracy = val_accuracy\n",
        "             patience_counter = 0\n",
        "        else:\n",
        "            patience_counter += 1 \n",
        "\n",
        "        if patience_counter >= patience:\n",
        "          print(f\"Early stopping triggered after {epoch + 1} epochs due to no improvement in validation accuracy\")\n",
        "          num_missing_values = num_epochs - epoch - 1\n",
        "          train_accuracies.extend([None] * num_missing_values)\n",
        "          val_accuracies.extend([None] * num_missing_values)\n",
        "          train_f_scores.extend([None] * num_missing_values)\n",
        "          val_f_scores.extend([None] * num_missing_values)\n",
        "\n",
        "          #return avg_train_loss_per_epoch, avg_val_loss_per_epoch, train_accuracies, val_accuracies, train_f_scores, val_f_scores\n",
        "          return avg_train_loss_per_epoch, avg_val_loss_per_epoch, train_accuracies, val_accuracies, train_f_scores, val_f_scores      \n",
        "\n",
        "\n",
        "\n",
        "    return avg_train_loss_per_epoch, avg_val_loss_per_epoch, train_accuracies, val_accuracies, train_f_scores, val_f_scores        \n"
      ],
      "metadata": {
        "id": "DhGyPfiZKJGP"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "batch_size = 8  # Choose a batch size according to your needs\n",
        "\n",
        "train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4)\n",
        "val_dataloader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=4)"
      ],
      "metadata": {
        "id": "d0HBUfIOKUln"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_epochs = 5\n",
        "lstm_hidden_size= 50\n",
        "dropout_rate = 0.3\n",
        "learning_rate = 3e-5\n",
        "clip_grad_value = 1.5\n",
        "custom_weight_value = 27.0\n",
        "layers_to_use = [1,2,3]\n",
        "task_weights = torch.tensor([1.0, 0.1,0.1,0.06]).to(device)"
      ],
      "metadata": {
        "id": "-KPRYdEJKg34"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "aux_model = SRLauxModel(bert_model = bert_model , lstm_hidden_size = lstm_hidden_size, dropout_rate = dropout_rate, layers_to_use=layers_to_use, num_pos_tags=9, num_bio_tags=18).to(device)\n",
        "optimizer = torch.optim.Adam(aux_model.parameters(), lr=learning_rate)\n",
        "criterion = nn.BCEWithLogitsLoss()"
      ],
      "metadata": {
        "id": "x6VB_zDYKkrp"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "aux_model.load_state_dict(torch.load('/content/drive/MyDrive/nlp_srl/srl_aux_model_189.pth'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wKhQjo_DKuaH",
        "outputId": "db4243d3-37b1-41ba-c97f-b7db56c48232"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<All keys matched successfully>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "average_loss, accuracy, best_f_score, best_threshold, average_aux_pos_loss, average_aux_bio_loss, average_aux_directed_distance_loss = validate(aux_model, train_dataloader)"
      ],
      "metadata": {
        "id": "buW2guU7K-a4"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(average_loss)\n",
        "print(accuracy)\n",
        "print(best_f_score)\n",
        "print(best_threshold)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8cTRwkaWLYR9",
        "outputId": "df03b116-0c1d-463c-ea82-6ad9031cafec"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.01724358676979155\n",
            "0.9979908641179704\n",
            "0.9728761514841351\n",
            "0.985987\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "average_loss, accuracy, best_f_score, best_threshold, average_aux_pos_loss, average_aux_bio_loss, average_aux_directed_distance_loss = validate(aux_model, val_dataloader)"
      ],
      "metadata": {
        "id": "03pC5qstLmCk"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(average_loss)\n",
        "print(accuracy)\n",
        "print(best_f_score)\n",
        "print(best_threshold)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QrPzkXRxLpY6",
        "outputId": "2cd558df-40e3-4e22-81c3-baeb866da525"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.02477859427376531\n",
            "0.9971614252633152\n",
            "0.9607438016528924\n",
            "0.883455\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "aux_model.load_state_dict(torch.load('/content/drive/MyDrive/nlp_srl/srl_aux_model_189.pth'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MUXdT1K-O_0Z",
        "outputId": "660a20cf-7518-4dff-e675-1fe9fbdcd5e7"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<All keys matched successfully>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_model_aux(model = aux_model, train_dataset = train_dataset, train_dataloader=train_dataloader , val_dataloader = val_dataloader,\n",
        "                optimizer = optimizer, num_epochs = num_epochs, task_weights = task_weights, clip_grad_value=clip_grad_value, weighting_method='custom', custom_value=custom_weight_value , patience=25)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "obkUa1lWNDfo",
        "outputId": "c57116ec-3131-4753-970e-0c59fe3082c3"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "Validation Loss: 0.015512139656195478, Validation Accuracy: 0.9978337192798984, Best F-score: 0.9700103412616339, Best Threshold: 0.9754377007484436, POS loss: 0.3111149072647095, BIO loss; 0.2095034122467041, Dir dist loss : 1.870924949645996\n",
            "Epoch 2/5\n",
            "Validation Loss: 0.01703729944567952, Validation Accuracy: 0.9980578172854262, Best F-score: 0.9730848861283645, Best Threshold: 0.9968699812889099, POS loss: 0.13858331739902496, BIO loss; 0.11421101540327072, Dir dist loss : 1.581730604171753\n",
            "Epoch 3/5\n",
            "Validation Loss: 0.013509533338708666, Validation Accuracy: 0.9980578172854262, Best F-score: 0.9730290456431534, Best Threshold: 0.9990208148956299, POS loss: 0.05206303671002388, BIO loss; 0.06738263368606567, Dir dist loss : 1.7184187173843384\n",
            "Epoch 4/5\n",
            "Validation Loss: 0.02032052103080429, Validation Accuracy: 0.9976096212743707, Best F-score: 0.9669421487603307, Best Threshold: 0.9985407590866089, POS loss: 0.028412315994501114, BIO loss; 0.048902034759521484, Dir dist loss : 1.5730820894241333\n",
            "Epoch 5/5\n",
            "Validation Loss: 0.014543786497209813, Validation Accuracy: 0.9979831179502503, Best F-score: 0.9722507708119218, Best Threshold: 0.6084664463996887, POS loss: 0.01891324669122696, BIO loss; 0.037563346326351166, Dir dist loss : 1.4352282285690308\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([1.1805673168036948,\n",
              "  0.6572193009972078,\n",
              "  0.4093194938886957,\n",
              "  0.33383733973185303,\n",
              "  0.2571330358857807],\n",
              " [0.015512139656195478,\n",
              "  0.01703729944567952,\n",
              "  0.013509533338708666,\n",
              "  0.02032052103080429,\n",
              "  0.014543786497209813],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [])"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    }
  ]
}
